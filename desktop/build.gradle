import org.gradle.internal.os.OperatingSystem;

plugins { id 'org.beryx.runtime' version '1.8.4' }
apply plugin: 'application'

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.sixmoney.gigagal.desktop.DesktopLauncher'
def osName = System.getProperty('os.name').toLowerCase(Locale.ROOT)
eclipse.project.name = appName + '-desktop'
sourceCompatibility = 8.0

dependencies {
	implementation project(':core')
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
}

jar {
	archiveBaseName.set(appName)
// the duplicatesStrategy will matter starting in Gradle 7.0; this setting works.
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
// setting the manifest makes the JAR runnable.
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
// this last step may help on some OSes that need extra instruction to make runnable JARs.
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
	destinationDirectory = file("$buildDir/lib")
}

jpackageImage.dependsOn jar

run {
	ignoreExitValue = true
}

runtime {
	options = ['--strip-debug',
			   '--compress', '2',
			   '--no-header-files',
			   '--no-man-pages',
			   '--strip-native-commands',
			   '--vm', 'server']
	modules = ['java.base' ,
			   'java.desktop',
			   'jdk.unsupported']
	distDir = file(buildDir)

	jpackage {
		//jpackageHome = '/usr/lib/jvm/open-jdk'
		mainJar = jar.archiveFileName.get()
		if (osName.contains('windows')) {
			imageOptions = ["--icon", file("../icons/libgdx128.ico")]
		} else if (osName.contains('linux')) {
			imageOptions = ["--icon", file("../icons/libgdx128.png")]
		}
	}
}

task buildSEA(type: Exec) {
	workingDir "$buildDir/jpackage/"
	commandLine "makeself", "--noprogress", "--nowait", "--nox11", "./desktop", "gigagal-linux", "\"GigaGal\"", "./bin/desktop"
}

if (osName.contains('linux')) {
	jpackageImage.finalizedBy(buildSEA)
}
